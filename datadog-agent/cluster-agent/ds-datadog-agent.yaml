apiVersion: extensions/v1beta1
kind: DaemonSet
metadata:
  name: datadog-agent
  namespace: default
spec:
  template:
    metadata:
      labels:
        app: datadog-agent
        label_to_get: My_DDAgent_xyz
        label_not_to_get: blahblah123
      name: datadog-agent
    spec:
      serviceAccountName: datadog-agent
      containers:
      - image: datadog/agent:latest # Agent builds: https://hub.docker.com/r/datadog/agent/tags/
      #- image: datadog/agent-dev:latest # Agent-Dev builds: https://hub.docker.com/r/datadog/agent-dev/tags/
        imagePullPolicy: Always
        name: datadog-agent
        livenessProbe:
          exec:
            command:
            - ./probe.sh
          initialDelaySeconds: 20
          periodSeconds: 10
        ports:
          - containerPort: 8125
            # hostPort: 8125
            name: dogstatsdport
            protocol: UDP
          - containerPort: 8126
            # hostPort: 8126
            name: traceport
            protocol: TCP
        env:
          # DD Default stuff
          - name: DD_API_KEY
            # value: <YOUR_API_KEY>
            valueFrom:
              secretKeyRef:
                # See secrets.yaml.example
                name: dd-secrets
                key: dd_api_key
          - name: KUBERNETES
            value: "true"
          - name: DD_KUBERNETES_KUBELET_HOST
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          # Other env variables
          - name: ENV
            valueFrom:
              configMapKeyRef:
                name: cm-other-env
                key: MY_ENV
        # Other environment variables from ConfigMap cm-datadog-env
        envFrom:
          - configMapRef:
              name: cm-datadog-env
        # Other stuff
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "250m"
        volumeMounts:
          # DD Default stuff
          - name: dockersocket
            mountPath: /var/run/docker.sock
          - name: procdir
            mountPath: /host/proc
            readOnly: true
          - name: cgroups
            mountPath: /host/sys/fs/cgroup
            readOnly: true
          # DD Log collection setup
          - name: pointerdir
            mountPath: /opt/datadog-agent/run
          # DD conf.d and checks.d
          - # Example: Mount a volume. Each data item will be created as a file.
            name: vol-datadog-confd
            mountPath: /conf.d
          - # Example: Custom check
            name: vol-datadog-checksd
            mountPath: /opt/datadog-agent/checks.d/hello.py
            subPath: hello.py
          - name: emptydir
            mountPath: /etc/datadog-agent/conf.d/disk.d/
          - # Example: Mount/overwrite a specific file
            name: file-datadog-kubernetes
            mountPath: /etc/datadog-agent/datadog-kubernetes.yaml
            subPath: datadog-kubernetes-yaml
        # Others stuff
          - name: ssl-certs
            mountPath: /etc/kubernetes/ssl
      volumes:
        # DD Default stuff
        - hostPath:
            path: /var/run/docker.sock
          name: dockersocket
        - hostPath:
            path: /proc
          name: procdir
        - hostPath:
            path: /sys/fs/cgroup
          name: cgroups
        # DD Log collection setup
        - name: pointerdir
          hostPath:
            path: /var/run/datadog-agent.run
          # configMap:
          #   name: datadogtoken
        # DD conf.d and checks.d
        - name: file-datadog-kubernetes
          configMap:
            name: cm-datadog-yaml
        - name: vol-datadog-confd
          configMap:
            name: cm-datadog-confd
            # items:  # If you want to be more specific
            #   - key: logs.yaml
            #     path: agentlogs.yaml
        - name: vol-datadog-checksd
          configMap:
            name: cm-datadog-checksd
        # Others stuff
        - name: ssl-certs
          hostPath:
            path: /etc/kubernetes/ssl
        - name: emptydir
          emptyDir: {}
